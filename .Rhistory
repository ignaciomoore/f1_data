numberOfDriversByNationality[order(numberOfDriversByNationality$numberOfDrivers, decreasing = TRUE),]
drivers[drivers$nationality == 'Finnish',]
drivers[drivers$surname == 'Rosberg',]
circuits <- read.csv(file = "Data/circuits.csv", header = TRUE)
circuits$url <- NULL
constructorResults <- read.csv(file = "Data/constructorResults.csv", header = TRUE)
constructors <- read.csv(file = "Data/constructors.csv", header = TRUE)
constructors$X <- NULL
constructors$url <- NULL
constructorStandings <- read.csv(file = "Data/constructorStandings.csv", header = TRUE)
constructorStandings$X <- NULL
drivers <- read.csv(file = "Data/drivers.csv", header = TRUE)
drivers$url <- NULL
driverStandings <- read.csv(file = "Data/driverStandings.csv", header = TRUE)
lapTimes <- read.csv(file = "Data/lapTimes.csv", header = TRUE)
pitStops <- read.csv(file = "Data/pitStops.csv", header = TRUE)
qualifying <- read.csv(file = "Data/qualifying.csv", header = TRUE)
races <- read.csv(file = "Data/races.csv", header = TRUE)
races$url <- NULL
results <- read.csv(file = "Data/results.csv", header = TRUE)
seasons <- read.csv(file = "Data/seasons.csv", header = TRUE)
seasons$url <- NULL
status <- read.csv(file = "Data/status.csv", header = TRUE)
numberOfDriversByNationality <- aggregate(driverId ~ nationality, drivers, length)
names(numberOfDriversByNationality)[names(numberOfDriversByNationality) == 'driverId'] <- 'numberOfDrivers'
numberOfDriversByNationality[order(numberOfDriversByNationality$numberOfDrivers, decreasing = TRUE),]
drivers[drivers$nationality == 'Russian',]
drivers[drivers$nationality == 'Chilean',]
drivers[drivers$nationality == 'Thai',]
barplot(numberOfDriversByNationality$numberOfDrivers, numberOfDriversByNationality$nationality)
barplot(numberOfDriversByNationality$numberOfDrivers, names.arg = numberOfDriversByNationality$nationality)
barplot(names.arg = numberOfDriversByNationality$nationality, numberOfDriversByNationality$numberOfDrivers)
numberOfDriversByNationality <- numberOfDriversByNationality[order(numberOfDriversByNationality$numberOfDrivers, decreasing = TRUE),]
barplot(names.arg = numberOfDriversByNationality$nationality, numberOfDriversByNationality$numberOfDrivers)
library(ggplot2)
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = nationality, y = numberOfDrivers)) +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = nationality, y = numberOfDrivers, stat = "identity")) +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = nationality, y = numberOfDrivers), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
head(numberOfDriversByNationality)
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = reorder(nationality, -numberOfDrivers), y = numberOfDrivers), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = reorder(nationality, numberOfDrivers), y = numberOfDrivers), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
merge(circuits, races, by = "circuitId")
names(merge(circuits, races, by = "circuitId"))
head(merge(circuits, races, by = "circuitId"))
racesByCircuit <- merge(circuits, races, by = "circuitId")
names(racesByCircuit)[names(racesByCircuit) == "name.x"] <- "circuitName"
names(racesByCircuit)[names(racesByCircuit) == "name.y"] <- "raceName"
names(racesByCircuit)
aggregate(raceId ~ country, racesByCircuit, length)
numberOfRacesByCountry <- aggregate(raceId ~ country, racesByCircuit, length)
names(numberOfRacesByCountry)
names(numberOfRacesByCountry)[names(numberOfRacesByCountry) == "raceId"] <- "numberOfRaces"
numberOfRacesByCountry[order(numberOfRacesByCountry$numberOfRaces, decreasing = TRUE),]
ggplot(numberOfRacesByCountry) +
geom_bar(aes(x = reorder(country, numberOfRaces), y = numberOfRaces), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de Carreras por Pais") +
xlab("Pais") + ylab("Cantidad de Carreras")
numberOfDriversByNationality
numberOfRacesByCountry
drivers[drivers$nationality == "American-Italian"]
drivers[drivers$nationality == "American-Italian",]
drivers[drivers$nationality == "Argentine-Italian",]
countryNationalities <- read.csv(file = "Data/countryNationalities.csv", header = TRUE)
countryNationalities
merge(drivers, countryNationalities, by = "nationality")
merge(merge(drivers, countryNationalities, by = "nationality"), racesByCircuit, by = "country")
names(merge(merge(drivers, countryNationalities, by = "nationality"), racesByCircuit, by = "country"))
merge(merge(drivers, countryNationalities, by = "nationality"), racesByCircuit, by = "country")
homeDrivers <- merge(merge(drivers, countryNationalities, by = "nationality"), racesByCircuit, by = "country")
subset(homeDrivers, c("country", "nationality"))
subset(homeDrivers, c("country", "nationality"),)
subset(homeDrivers, select = c("country", "nationality"))
merge(drivers, countryNationalities)
dim(drivers)
dim(merge(drivers, countryNationalities))
dim(races)
dim(racesByCircuit)
dim(races)
dim(racesByCircuit)
dim(races)
dim(homeDrivers)
driversWithCountry <- merge(drivers, countryNationalities, by = "nationality")
names(driversWithCountry)[names(driversWithCountry) == "country"] <- "driverCountry"
merge(driversWithCountry, results, by = "driverId")
dim(results)
dim(merge(driversWithCountry, results, by = "driverId"))
merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId")
dim(merge(driversWithCountry, results, by = "driverId"))
dim(merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId"))
homeDrivers <- merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId")
dim(homeDrivers)
names(homeDrivers)
homeDrivers <- merge(merge(driversWithCountry, results, by = c("driverId", "number")), racesByCircuit, by = "raceId")
names(homeDrivers)
names(homeDrivers)[names(homeDrivers) == "country"] <- "circuitCountry"
names(homeDrivers)
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry,]
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
names(homeDrivers)
subset(homeDrivers, select = c("driversCountry", "circuitCountry", "driverRef", "raceName", "circuitName"))
names(homeDrivers)
subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName"))
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
homeDrivers[homeDrivers$driverCountry == "UK", ]
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
subset(homeDrivers, select = c("country", "nationality"))
homeDrivers <- merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId")
names(homeDrivers)[names(homeDrivers) == "country"] <- "circuitCountry"
names(homeDrivers)
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName"))
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
head(homeDrivers)
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName", "raceId", "driverId"))
names(homeDrivers)
names(homeDrivers)
homeDrivers <- merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId")
names(homeDrivers)
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName", "raceId", "driverId"))
names(homeDrivers)
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName"))
names(homeDrivers)
names(homeDrivers)[names(homeDrivers) == "country"] <- "circuitCountry"
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName", "raceId", "driverId"))
head(homeDrivers)
homeDrivers[homeDrivers$raceId == 1,]
dim(homeDrivers)
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
homeDrivers[homeDrivers$driverCountry, ]
homeDrivers
homeDrivers[homeDrivers$circuitCountry == "UK",]
homeDrivers[homeDrivers$circuitCountry == homeDrivers$driverCountry,]
homeDrivers[,2]
head(homeDrivers[,2])
names(homeDrivers)
homeDrivers[,1] <- factor(homeDrivers[,1], levels = levels(homeDrivers[,2]))
homeDrivers[homeDrivers$circuitCountry == homeDrivers$driverCountry,]
subset(homeDrivers, homeDrivers$circuitCountry == homeDrivers$driverCountry)
dim(subset(homeDrivers, homeDrivers$circuitCountry == homeDrivers$driverCountry))
subset(homeDrivers, homeDrivers$circuitCountry == homeDrivers$driverCountry)
homeDrivers <- subset(homeDrivers, homeDrivers$circuitCountry == homeDrivers$driverCountry)
aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
aggregate(raceId ~ circuitCountry, homeDrivers, length)
aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
aggregate(raceId ~ circuitCountry, homeDrivers, length)
aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
aggregate(raceId ~ circuitCountry, homeDrivers, length)
aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
homeDriversByCountry <- aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
names(homeDriversByCountry)
names(homeDriversByCountry)[names(homeDriversByCountry) == "raceId + driverId"] <- "numberOfParticipations"
names(homeDriversByCountry)
ggplot(homeDriversByCountry) +
geom_bar(aes(x = reorder(circuitCountry, numberOfParticipations), y = numberOfParticipations), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de veces que conductores han corrido en su casa") +
xlab("Pais") + ylab("Cantidad de veces que han participado")
library(ggplot2)
library(ggplot2)
ggplot(homeDriversByCountry) +
geom_bar(aes(x = reorder(circuitCountry, numberOfParticipations), y = numberOfParticipations), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de veces que conductores han corrido en su casa") +
xlab("Pais") + ylab("Cantidad de veces que han participado")
ggplot(homeDriversByCountry) +
geom_bar(aes(x = reorder(circuitCountry, numberOfParticipations), y = numberOfParticipations), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de veces que Conductores han Participado en su Pais") +
xlab("Pais") + ylab("Cantidad de veces que han participado")
d_nationality <-drivers[,c('driverId','driverRef','nationality')]
d_nationality <- merge(d_nationality, countryNationality, by='nationality' )
winners <- results[results$positionOrder == 1,]
winners_data <- merge(winners,nationality, by='driverId')
winners_constructors <- merge(winners,c_nationality, by='constructorId')
Italian_races <- racesByCircuit[racesByCircuit$country == "Italy",]
Italian_races_winners <- merge(Italian_races, winners, by="raceId")
Italian_races_winners <- Italian_races_winners[,c("driverId","constructorId","position")]
Italian_races_winners <- merge(Italian_races_winners, d_nationality, by="driverId")
Italian_races_winners <- merge(Italian_races_winners, c_nationality, by="constructorId")
ggplot(Italian_c_Nationality_winners)+
geom_bar(aes(x=reorder(c_country,races_won),y=races_won),stat = "identity")+
ggtitle("Paises fabricantes ganadores en Italia")+
coord_flip()+
xlab("País")+
ylab("Cantidad de victorias")
starting_grid_analysis <- results[c["grid", "position"],]
starting_grid_analysis <- results[c("grid", "position"),]
starting_grid_analysis
results
starting_grid_analysis <- results[c("grid", "position")]
starting_grid_analysis
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId")]
starting_grid_analysis
results
starting_grid_analysis <- merge(results, status, by="statusId")
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId", "status")]
starting_grid_analysis <- merge(results, status, by="statusId")
names(starting_grid_analysis)
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId", "status")]
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId", "status"),]
starting_grid_analysis
starting_grid_analysis <- merge(results, status, by="statusId")
starting_grid_analysis
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId", "status"),]
starting_grid_analysis
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId"),]
starting_grid_analysis
starting_grid_analysis <- merge(results, status, by="statusId")
starting_grid_analysis
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId"),]
starting_grid_analysis
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId"),]
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId", "statusId"),]
starting_grid_analysis
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId"),]
starting_grid_analysis
results
starting_grid_analysis <- results[c("grid", "position", "driverId", "raceId"),]
starting_grid_analysis
starting_grid_analysis <- results[,c("grid", "position", "driverId", "raceId")]
starting_grid_analysis
starting_grid_analysis <- results[,c("grid", "position", "driverId", "raceId", "statusId")]
starting_grid_analysis
starting_grid_analysis <- merge(starting_grid_analysis, status, by="statusId")
starting_grid_analysis
status
starting_grid_analysis[starting_grid_analysis$statusId != 1, ]
status
starting_grid_analysis[starting_grid_analysis$statusId==3 | starting_grid_analysis$statusId==4 | starting_grid_analysis$statusId==130, ]
nrow(starting_grid_analysis[starting_grid_analysis$statusId==3])
nrow(starting_grid_analysis[starting_grid_analysis$statusId==3,])
nrow(starting_grid_analysis[starting_grid_analysis$statusId==3,])
nrow(starting_grid_analysis[starting_grid_analysis$statusId==4,])
nrow(starting_grid_analysis[starting_grid_analysis$statusId==130,])
status
starting_grid_analysis[starting_grid_analysis$position==NaN,]
starting_grid_analysis[starting_grid_analysis$position==NULL,]
starting_grid_analysis[starting_grid_analysis$position.is.null,]
starting_grid_analysis[starting_grid_analysis$position.is.nan,]
starting_grid_analysis
starting_grid_analysis
View(results)
unique(starting_grid_analysis$position)
sort(unique(starting_grid_analysis$position))
sort(unique(starting_grid_analysis$statusId))
sum(is.na(starting_grid_analysis$position))
sum(is.na(starting_grid_analysis[starting_grid_analysis$statusId==3,]$position))
sum(is.na(starting_grid_analysis[starting_grid_analysis$statusId==3,]$position))
sum(is.na(starting_grid_analysis[starting_grid_analysis$statusId==4,]$position))
sum(is.na(starting_grid_analysis[starting_grid_analysis$statusId==130,]$position))
starting_grid_analysis[starting_grid_analysis$statusId.is.in(c(3,4,130)),]
starting_grid_analysis[starting_grid_analysis$statusId[c(3,4,130)],]
starting_grid_analysis[starting_grid_analysis$statusId==3 |
starting_grid_analysis$statusId==4 |
starting_grid_analysis$statusId==130,]
acc_col_results <- starting_grid_analysis[starting_grid_analysis$statusId==3 |
starting_grid_analysis$statusId==4 |
starting_grid_analysis$statusId==130,]
acc_col_results %>% count(grid)
acc_col_results.count(grid)
require(dplyr)
require(dplyr)
acc_col_results %>% count(grid)
acc_col_grid <- acc_col_results %>% count(grid)
plot(acc_col_grid$grid, acc_col_grid$n)
barplot(acc_col_grid)
acc_col_grid
ggplot(acc_col_grid) +
geom_bar(aes(x=grid, y=n))
libray(ggplot2)
library(ggplot2)
library(ggplot2)
ggplot(acc_col_grid) +
geom_bar(aes(x=grid, y=n))
ggplot(acc_col_grid) +
geom_bar()
ggplot(acc_col_grid) +
geom_bar(aes(x=grid, y=n), stat = "identity")
results %>% count(grid)
merge(results, status, by="statusId")
starting_grid_analysis <- merge(results, status, by="statusId")
starting_grid_analysis <- starting_grid_analysis[, c("grid", "position", "driverId", "raceId", "statusId", "status")]
total_races <- results %>% count(grid)
require(dplyr)
total_races <- results %>% count(grid)
names(total_races)[names(total_races) == "n"] <- "total"
dnfs <- results[results$statusId == 3 |
results$statusId == 4 |
results$statusId == 130,]
dnfs <- dnfs %>% count(grid)
names(dnfs)[names(dnfs) == "n"] <- "dnfs"
calc <- merge(total_races, dnfs, by = "grid")
calc$dnf_probability <- (calc$dnfs/calc$total)*100
ggplot(calc) +
geom_bar(aes(x=grid, y=dnf_probability), stat = "identity") +
xlab("Posicion en que se inicia la carrera") +
ylab("Porcentage de no terminar la carrera")
require(dplyr)
library(ggplot2)
total_races <- results %>% count(grid)
names(total_races)[names(total_races) == "n"] <- "total"
dnfs <- results[results$statusId == 3 |
results$statusId == 4 |
results$statusId == 130,]
dnfs <- dnfs %>% count(grid)
names(dnfs)[names(dnfs) == "n"] <- "dnfs"
calc <- merge(total_races, dnfs, by = "grid")
calc$dnf_probability <- (calc$dnfs/calc$total)*100
ggplot(calc) +
geom_bar(aes(x=grid, y=dnf_probability), stat = "identity") +
xlab("Posicion en que se inicia la carrera") +
ylab("Porcentage de no terminar la carrera")
require(dplyr)
library(ggplot2)
total_races <- results %>% count(grid)
names(total_races)[names(total_races) == "n"] <- "total"
dnfs <- results[results$statusId == 3 |
results$statusId == 4 |
results$statusId == 130,]
dnfs <- dnfs %>% count(grid)
names(dnfs)[names(dnfs) == "n"] <- "dnfs"
calc <- merge(total_races, dnfs, by = "grid")
calc$dnf_probability <- (calc$dnfs/calc$total)*100
ggplot(calc) +
geom_bar(aes(x=grid, y=dnf_probability), stat = "identity") +
xlab("Posicion en que se inicia la carrera") +
ylab("Porcentage de no terminar la carrera") +
title("Probabilidad de chocar o tener un accidente dependiendo de la posicion en que se inicia la carrera")
require(dplyr)
library(ggplot2)
total_races <- results %>% count(grid)
names(total_races)[names(total_races) == "n"] <- "total"
dnfs <- results[results$statusId == 3 |
results$statusId == 4 |
results$statusId == 130,]
dnfs <- dnfs %>% count(grid)
names(dnfs)[names(dnfs) == "n"] <- "dnfs"
calc <- merge(total_races, dnfs, by = "grid")
calc$dnf_probability <- (calc$dnfs/calc$total)*100
ggplot(calc) +
geom_bar(aes(x=grid, y=dnf_probability), stat = "identity") +
xlab("Posicion en que se inicia la carrera") +
ylab("Porcentage de no terminar la carrera") +
ggtitle("Probabilidad de chocar o tener un accidente dependiendo de la posicion en que se inicia la carrera")
require(dplyr)
library(ggplot2)
total_races <- results %>% count(grid)
names(total_races)[names(total_races) == "n"] <- "total"
dnfs <- results[results$statusId == 3 |
results$statusId == 4 |
results$statusId == 130,]
dnfs <- dnfs %>% count(grid)
names(dnfs)[names(dnfs) == "n"] <- "dnfs"
calc <- merge(total_races, dnfs, by = "grid")
calc$dnf_probability <- (calc$dnfs/calc$total)*100
ggplot(calc) +
geom_bar(aes(x=grid, y=dnf_probability), stat = "identity") +
xlab("Posicion en que se inicia la carrera") +
ylab("Porcentage de no terminar la carrera") +
ggtitle("Probabilidad de chocar o tener un accidente")
names(results)
names(races)
names(results)
names(results)
names(results)
names(races)
races_results <- merge(races, results, by = "raceId")
names(races_results)
races_results[, c("year", "grid", "constructorId", "drvierId", "circuitId")]
races_results <- races_results[, c("year", "grid", "constructorId", "drvierId", "circuitId")]
races_results <- merge(races, results, by = "raceId")
names(races_results)
races_results <- races_results[, c("year", "grid", "constructorId", "driverId", "circuitId")]
names(races_results)
races_results <- merge(races, results, by = "raceId")
names(races_results)
races_results <- races_results[, c("year", "grid", "constructorId", "driverId", "circuitId", "position")]
names(races_results)
dtc_data <- races_results[, c("year", "grid", "constructorId", "driverId", "circuitId")]
dtc_data <- dtc_data[dtc_data$year < "2017"]
dtc_data <- dtc_data[dtc_data$year < "2017",]
dtc <- races_results[races_results$year < "2017",]
dtc_data <- dtc[, c("year", "grid", "constructorId", "driverId", "circuitId")]
dtc_target <- dtc$position
head(dtc_target)
dtc_target <- dtc$position
head(dtc_target)
nrow(dtc_data)
nrow(dtc_target)
dtc_target <- dtc[, c("position")]
nrow(dtc_data)
nrow(dtc_target)
nrow(dtc_target)
nrow(dtc_data)
dtc_target <- dtc[, c("position")]
head(dtc_target)
dtc <- races_results[races_results$year < "2017",]
dtc_data <- dtc[, c("year", "grid", "constructorId", "driverId", "circuitId")]
dtc_target <- dtc[, c("position")]
head(dtc_target)
nrow(dtc_data)
nrow(dtc_target)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library("rpart")
library("rpart.plot")
install.packages("rpart")
install.packages("rpart.plot")
library("rpart")
library("rpart.plot")
races_results <- merge(races, results, by = "raceId")
races_results <- races_results[, c("year", "grid", "constructorId", "driverId", "circuitId", "position")]
train = races_results[races_results$year < 2017,]
test = races_results[races_results$year == 2017, ]
target = position ~ year + grid + constructorId + driverId + circuitId
tree = rpart(target, data = train, method = "position")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
library("rpart")
library("rpart.plot")
races_results <- merge(races, results, by = "raceId")
races_results <- races_results[, c("year", "grid", "constructorId", "driverId", "circuitId", "position")]
train = races_results[races_results$year < 2017,]
test = races_results[races_results$year == 2017, ]
target = position ~ year + grid + constructorId + driverId + circuitId
tree = rpart(target, data = train, method = "position")
races_results <- merge(races, results, by = "raceId")
races_results <- races_results[, c("year", "grid", "constructorId", "driverId", "circuitId", "position")]
train = races_results[races_results$year < 2017,]
test = races_results[races_results$year == 2017, ]
target = position ~ year + grid + constructorId + driverId + circuitId
tree = rpart(target, data = train, method = "position")
tree = rpart(target, data = train, method = "class")
predictions = predict(tree, test)
table(predictions, races_results$position)
head(train)
head(target)
rpart.plot(tree)
predictions = predict(tree, test)
install.packages("party")
library(party)
tree2 = ctree(position ~ ., data = races_results)
grid_position <- results[. c("grid". "position")]
grid_position <- results[, c("grid", "position")]
grid_position %>% count(grid, position)
require(dplyr)
grid_position %>% count(grid, position)
grid_position %>% count(grid)
total_grid_starts <- grid_position %>% count(grid)
total_grid_finishes <- grid_position %>% count(grid, position)
merge(total_grid_starts, total_grid_finishes, by = "grid")
grid_position <- results[, c("grid", "position")]
total_grid_starts <- grid_position %>% count(grid)
names(total_grid_starts)[names(total_grid_starts) == "n"] <- "number of starts"
total_grid_finishes <- grid_position %>% count(grid, position)
names(total_grid_finishes)[names(total_grid_finishes) == "n"] <- "number of finishes"
merge(total_grid_starts, total_grid_finishes, by = "grid")
gp_analysis <- merge(total_grid_starts, total_grid_finishes, by = "grid")
names(total_grid_starts)[names(total_grid_starts) == "n"] <- "number_of_starts"
names(total_grid_finishes)[names(total_grid_finishes) == "n"] <- "number_of_finishes"
gp_analysis <- merge(total_grid_starts, total_grid_finishes, by = "grid")
grid_position <- results[, c("grid", "position")]
total_grid_starts <- grid_position %>% count(grid)
names(total_grid_starts)[names(total_grid_starts) == "n"] <- "number_of_starts"
total_grid_finishes <- grid_position %>% count(grid, position)
names(total_grid_finishes)[names(total_grid_finishes) == "n"] <- "number_of_finishes"
gp_analysis <- merge(total_grid_starts, total_grid_finishes, by = "grid")
gp_analysis$fs_probability <- (gp_analysis$number_of_finishes / gp_analysis$number_of_starts) * 100
library(ggplot2)
ggplot(gp_analysis, aes(x=grid, y=position)) +
geom_point(aes(size=fs_probability))
ggplot(gp_analysis, aes(x=grid, y=position)) +
geom_point(aes(size=fs_probability, color=fs_probability))
library(reticulate)
require(dplyr)
library(ggplot2)
total_races <- results %>% count(grid)
names(total_races)[names(total_races) == "n"] <- "total"
dnfs <- results[results$statusId == 3 |
results$statusId == 4 |
results$statusId == 130,]
dnfs <- dnfs %>% count(grid)
names(dnfs)[names(dnfs) == "n"] <- "dnfs"
calc <- merge(total_races, dnfs, by = "grid")
calc$dnf_probability <- (calc$dnfs/calc$total)*100
ggplot(calc) +
geom_bar(aes(x=grid, y=dnf_probability), stat = "identity") +
xlab("Posicion en que se inicia la carrera") +
ylab("Porcentage de no terminar la carrera") +
ggtitle("Probabilidad de chocar o tener un accidente")
