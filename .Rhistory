circuits <- read.csv(file = "Data/circuits.csv", header = TRUE)
head(circuits)
constructorResults <- read.csv(file = "Data/constructorResults.csv", header = TRUE)
constructorS <- read.csv(file = "Data/constructors.csv", header = TRUE)
constructorStandings <- read.csv(file = "Data/constructorStandings.csv", header = TRUE)
drivers <- read.csv(file = "Data/drivers.csv", header = TRUE)
driverStandings <- read.csv(file = "Data/driverStandings.csv", header = TRUE)
lapTimes <- read.csv(file = "Data/lapTimes.csv", header = TRUE)
pitStops <- read.csv(file = "Data/pitStops.csv", header = TRUE)
qualifying <- read.csv(file = "Data/qualifying.csv", header = TRUE)
races <- read.csv(file = "Data/races.csv", header = TRUE)
results <- read.csv(file = "Data/results.csv", header = TRUE)
seasons <- read.csv(file = "Data/seasons.csv", header = TRUE)
status <- read.csv(file = "Data/status.csv", header = TRUE)
head(races)
dim(races)
head(drivers)
head(constructorStandings)
head(constructorS)
head(races)
head(status)
head(seasons)
aggregate(Nationality ~ driverId + driverRef, drivers, sum)
names(drivers)
aggregate(nationality ~ driverId + driverRef, drivers, sum)
aggregate(driverId ~ nationality, drivers, sum)
aggregate(driverId ~ nationality, drivers, count)
count(drivers, name = "nationality")
aggregate(driverId ~ nationality, drivers, function(x) {nrow(x)})
aggregate(driverId ~ nationality, drivers, nrow)
require(dplyr)
aggregate(driverId ~ nationality, drivers, count)
drivers %>% count(nationality)
drivers[drivers$nationality == 'American']
drivers[drivers$nationality == 'American']
drivers[drivers$nationality == 'American',]
drivers %>% count(nationality)
aggregate(driverId ~ nationality, drivers, length)
drivers %>% count(nationality)
aggregate(driverId ~ nationality, drivers, length)
numberOfDriversByNationality <- aggregate(driverId ~ nationality, drivers, length)
head(numberOfDriversByNationality)
names(numberOfDriversByNationality)[names(numberOfDriversByNationality) == 'driverId'] <- 'numberOfDrivers'
names(numberOfDriversByNationality)
numberOfDriversByNationality[order(numberOfDriversByNationality$numberOfDrivers, descending = TRUE),]
numberOfDriversByNationality[order(numberOfDriversByNationality$numberOfDrivers),]
numberOfDriversByNationality[order(numberOfDriversByNationality$numberOfDrivers, decreasing = TRUE),]
drivers[drivers$nationality == 'Finnish',]
drivers[drivers$surname == 'Rosberg',]
circuits <- read.csv(file = "Data/circuits.csv", header = TRUE)
circuits$url <- NULL
constructorResults <- read.csv(file = "Data/constructorResults.csv", header = TRUE)
constructors <- read.csv(file = "Data/constructors.csv", header = TRUE)
constructors$X <- NULL
constructors$url <- NULL
constructorStandings <- read.csv(file = "Data/constructorStandings.csv", header = TRUE)
constructorStandings$X <- NULL
drivers <- read.csv(file = "Data/drivers.csv", header = TRUE)
drivers$url <- NULL
driverStandings <- read.csv(file = "Data/driverStandings.csv", header = TRUE)
lapTimes <- read.csv(file = "Data/lapTimes.csv", header = TRUE)
pitStops <- read.csv(file = "Data/pitStops.csv", header = TRUE)
qualifying <- read.csv(file = "Data/qualifying.csv", header = TRUE)
races <- read.csv(file = "Data/races.csv", header = TRUE)
races$url <- NULL
results <- read.csv(file = "Data/results.csv", header = TRUE)
seasons <- read.csv(file = "Data/seasons.csv", header = TRUE)
seasons$url <- NULL
status <- read.csv(file = "Data/status.csv", header = TRUE)
numberOfDriversByNationality <- aggregate(driverId ~ nationality, drivers, length)
names(numberOfDriversByNationality)[names(numberOfDriversByNationality) == 'driverId'] <- 'numberOfDrivers'
numberOfDriversByNationality[order(numberOfDriversByNationality$numberOfDrivers, decreasing = TRUE),]
drivers[drivers$nationality == 'Russian',]
drivers[drivers$nationality == 'Chilean',]
drivers[drivers$nationality == 'Thai',]
barplot(numberOfDriversByNationality$numberOfDrivers, numberOfDriversByNationality$nationality)
barplot(numberOfDriversByNationality$numberOfDrivers, names.arg = numberOfDriversByNationality$nationality)
barplot(names.arg = numberOfDriversByNationality$nationality, numberOfDriversByNationality$numberOfDrivers)
numberOfDriversByNationality <- numberOfDriversByNationality[order(numberOfDriversByNationality$numberOfDrivers, decreasing = TRUE),]
barplot(names.arg = numberOfDriversByNationality$nationality, numberOfDriversByNationality$numberOfDrivers)
library(ggplot2)
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = nationality, y = numberOfDrivers)) +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = nationality, y = numberOfDrivers, stat = "identity")) +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = nationality, y = numberOfDrivers), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
head(numberOfDriversByNationality)
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = reorder(nationality, -numberOfDrivers), y = numberOfDrivers), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
ggplot(numberOfDriversByNationality) +
geom_bar(aes(x = reorder(nationality, numberOfDrivers), y = numberOfDrivers), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de Conductores por Nacionalidad") +
xlab("Nacionalidad") + ylab("Cantidad de Conductores")
merge(circuits, races, by = "circuitId")
names(merge(circuits, races, by = "circuitId"))
head(merge(circuits, races, by = "circuitId"))
racesByCircuit <- merge(circuits, races, by = "circuitId")
names(racesByCircuit)[names(racesByCircuit) == "name.x"] <- "circuitName"
names(racesByCircuit)[names(racesByCircuit) == "name.y"] <- "raceName"
names(racesByCircuit)
aggregate(raceId ~ country, racesByCircuit, length)
numberOfRacesByCountry <- aggregate(raceId ~ country, racesByCircuit, length)
names(numberOfRacesByCountry)
names(numberOfRacesByCountry)[names(numberOfRacesByCountry) == "raceId"] <- "numberOfRaces"
numberOfRacesByCountry[order(numberOfRacesByCountry$numberOfRaces, decreasing = TRUE),]
ggplot(numberOfRacesByCountry) +
geom_bar(aes(x = reorder(country, numberOfRaces), y = numberOfRaces), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de Carreras por Pais") +
xlab("Pais") + ylab("Cantidad de Carreras")
numberOfDriversByNationality
numberOfRacesByCountry
drivers[drivers$nationality == "American-Italian"]
drivers[drivers$nationality == "American-Italian",]
drivers[drivers$nationality == "Argentine-Italian",]
countryNationalities <- read.csv(file = "Data/countryNationalities.csv", header = TRUE)
countryNationalities
merge(drivers, countryNationalities, by = "nationality")
merge(merge(drivers, countryNationalities, by = "nationality"), racesByCircuit, by = "country")
names(merge(merge(drivers, countryNationalities, by = "nationality"), racesByCircuit, by = "country"))
merge(merge(drivers, countryNationalities, by = "nationality"), racesByCircuit, by = "country")
homeDrivers <- merge(merge(drivers, countryNationalities, by = "nationality"), racesByCircuit, by = "country")
subset(homeDrivers, c("country", "nationality"))
subset(homeDrivers, c("country", "nationality"),)
subset(homeDrivers, select = c("country", "nationality"))
merge(drivers, countryNationalities)
dim(drivers)
dim(merge(drivers, countryNationalities))
dim(races)
dim(racesByCircuit)
dim(races)
dim(racesByCircuit)
dim(races)
dim(homeDrivers)
driversWithCountry <- merge(drivers, countryNationalities, by = "nationality")
names(driversWithCountry)[names(driversWithCountry) == "country"] <- "driverCountry"
merge(driversWithCountry, results, by = "driverId")
dim(results)
dim(merge(driversWithCountry, results, by = "driverId"))
merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId")
dim(merge(driversWithCountry, results, by = "driverId"))
dim(merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId"))
homeDrivers <- merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId")
dim(homeDrivers)
names(homeDrivers)
homeDrivers <- merge(merge(driversWithCountry, results, by = c("driverId", "number")), racesByCircuit, by = "raceId")
names(homeDrivers)
names(homeDrivers)[names(homeDrivers) == "country"] <- "circuitCountry"
names(homeDrivers)
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry,]
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
names(homeDrivers)
subset(homeDrivers, select = c("driversCountry", "circuitCountry", "driverRef", "raceName", "circuitName"))
names(homeDrivers)
subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName"))
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
homeDrivers[homeDrivers$driverCountry == "UK", ]
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
subset(homeDrivers, select = c("country", "nationality"))
homeDrivers <- merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId")
names(homeDrivers)[names(homeDrivers) == "country"] <- "circuitCountry"
names(homeDrivers)
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName"))
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
head(homeDrivers)
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName", "raceId", "driverId"))
names(homeDrivers)
names(homeDrivers)
homeDrivers <- merge(merge(driversWithCountry, results, by = "driverId"), racesByCircuit, by = "raceId")
names(homeDrivers)
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName", "raceId", "driverId"))
names(homeDrivers)
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName"))
names(homeDrivers)
names(homeDrivers)[names(homeDrivers) == "country"] <- "circuitCountry"
homeDrivers <- subset(homeDrivers, select = c("driverCountry", "circuitCountry", "driverRef", "raceName", "circuitName", "raceId", "driverId"))
head(homeDrivers)
homeDrivers[homeDrivers$raceId == 1,]
dim(homeDrivers)
homeDrivers[homeDrivers$driverCountry == homeDrivers$circuitCountry, ]
homeDrivers[homeDrivers$driverCountry, ]
homeDrivers
homeDrivers[homeDrivers$circuitCountry == "UK",]
homeDrivers[homeDrivers$circuitCountry == homeDrivers$driverCountry,]
homeDrivers[,2]
head(homeDrivers[,2])
names(homeDrivers)
homeDrivers[,1] <- factor(homeDrivers[,1], levels = levels(homeDrivers[,2]))
homeDrivers[homeDrivers$circuitCountry == homeDrivers$driverCountry,]
subset(homeDrivers, homeDrivers$circuitCountry == homeDrivers$driverCountry)
dim(subset(homeDrivers, homeDrivers$circuitCountry == homeDrivers$driverCountry))
subset(homeDrivers, homeDrivers$circuitCountry == homeDrivers$driverCountry)
homeDrivers <- subset(homeDrivers, homeDrivers$circuitCountry == homeDrivers$driverCountry)
aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
aggregate(raceId ~ circuitCountry, homeDrivers, length)
aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
aggregate(raceId ~ circuitCountry, homeDrivers, length)
aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
aggregate(raceId ~ circuitCountry, homeDrivers, length)
aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
homeDriversByCountry <- aggregate(raceId + driverId ~ circuitCountry, homeDrivers, length)
names(homeDriversByCountry)
names(homeDriversByCountry)[names(homeDriversByCountry) == "raceId + driverId"] <- "numberOfParticipations"
names(homeDriversByCountry)
ggplot(homeDriversByCountry) +
geom_bar(aes(x = reorder(circuitCountry, numberOfParticipations), y = numberOfParticipations), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de veces que conductores han corrido en su casa") +
xlab("Pais") + ylab("Cantidad de veces que han participado")
library(ggplot2)
library(ggplot2)
ggplot(homeDriversByCountry) +
geom_bar(aes(x = reorder(circuitCountry, numberOfParticipations), y = numberOfParticipations), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de veces que conductores han corrido en su casa") +
xlab("Pais") + ylab("Cantidad de veces que han participado")
ggplot(homeDriversByCountry) +
geom_bar(aes(x = reorder(circuitCountry, numberOfParticipations), y = numberOfParticipations), stat = "identity") +
coord_flip() +
ggtitle("Cantidad de veces que Conductores han Participado en su Pais") +
xlab("Pais") + ylab("Cantidad de veces que han participado")
d_nationality <-drivers[,c('driverId','driverRef','nationality')]
d_nationality <- merge(d_nationality, countryNationality, by='nationality' )
winners <- results[results$positionOrder == 1,]
winners_data <- merge(winners,nationality, by='driverId')
winners_constructors <- merge(winners,c_nationality, by='constructorId')
Italian_races <- racesByCircuit[racesByCircuit$country == "Italy",]
Italian_races_winners <- merge(Italian_races, winners, by="raceId")
Italian_races_winners <- Italian_races_winners[,c("driverId","constructorId","position")]
Italian_races_winners <- merge(Italian_races_winners, d_nationality, by="driverId")
Italian_races_winners <- merge(Italian_races_winners, c_nationality, by="constructorId")
ggplot(Italian_c_Nationality_winners)+
geom_bar(aes(x=reorder(c_country,races_won),y=races_won),stat = "identity")+
ggtitle("Paises fabricantes ganadores en Italia")+
coord_flip()+
xlab("País")+
ylab("Cantidad de victorias")
